{"version":3,"sources":["components/Message.js","components/Channel.js","components/Header.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","avatar","backgroundColor","red","Message","createdAt","text","displayName","photoURL","classes","Card","className","CardHeader","Avatar","aria-label","src","title","subheader","seconds","formatRelative","Date","CardContent","Typography","variant","color","component","Channel","user","db","useState","messages","setMessages","newMessage","setNewMessage","uid","dummy","useRef","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","current","scrollIntoView","behavior","Container","message","ref","onSubmit","e","preventDefault","add","firebase","firestore","FieldValue","serverTimestamp","autoComplete","TextField","type","value","onChange","target","placeholder","IconButton","disabled","flexGrow","Header","auth","signOut","a","console","log","AppBar","position","style","Toolbar","Button","onClick","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","currentUser","setUser","onAuthStateChanged","signInWithGoogle","provider","GoogleAuthProvider","useDeviceLanguage","signInWithPopup","align","varient","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1464e859.chunk.js","sourcesContent":["import React from \"react\";\r\n// import {formatRelative} from 'date-fns';\r\n\r\n// function Message({createdAt= null,\r\n//     text ='',\r\n//     displayName = \"\",\r\n//     photoURL = \"\"}) {\r\n//     return (\r\n//         <div>\r\n// {\r\n//   photoURL ? <img src={photoURL} alt=\"Avatar\" width={45} /> : null;\r\n// }\r\n// {\r\n//   displayName ? <p> {displayName}</p> : null;\r\n// }\r\n// {\r\n//   createdAt?.seconds ? (\r\n//     <span>\r\n//       {formatRelative(new Date(createdAt.seconds * 1000), new Date())}\r\n//     </span>\r\n//   ) : null;\r\n// }\r\n//             <p>{text}</p>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Message;\r\nimport { formatRelative } from \"date-fns\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 900,\r\n  },\r\n  avatar: {\r\n    backgroundColor: red[500],\r\n  },\r\n}));\r\n\r\nexport default function Message({\r\n  createdAt = null,\r\n  text = \"\",\r\n  displayName = \"\",\r\n  photoURL = \"\",\r\n}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar\r\n            aria-label=\"photo\"\r\n            className={classes.avatar}\r\n            src={photoURL}\r\n          ></Avatar>\r\n        }\r\n        title={displayName ? displayName : null}\r\n        subheader={\r\n          createdAt?.seconds\r\n            ? formatRelative(new Date(createdAt.seconds * 1000), new Date())\r\n            : null\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {text}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport Message from \"./Message\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport \"../App.css\";\r\nconst Channel = ({ user = null, db = null }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const { uid, displayName, photoURL } = user;\r\n  const dummy = useRef();\r\n  useEffect(() => {\r\n    if (db) {\r\n      const unsubscribe = db\r\n        .collection(\"messages\")\r\n        .orderBy(\"createdAt\")\r\n        .limit(100)\r\n        .onSnapshot((querySnapshot) => {\r\n          const data = querySnapshot.docs.map((doc) => ({\r\n            ...doc.data(),\r\n            id: doc.id,\r\n          }));\r\n\r\n          setMessages(data);\r\n        });\r\n\r\n      return unsubscribe;\r\n    }\r\n  }, [db]);\r\n  const handleOnChange = (e) => {\r\n    setNewMessage(e.target.value);\r\n  };\r\n  const handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (db) {\r\n      db.collection(\"messages\").add({\r\n        text: newMessage,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        displayName,\r\n        photoURL,\r\n      });\r\n\r\n      setNewMessage(\"\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (messages) {\r\n      const scrollDown = () =>\r\n        dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n      return scrollDown();\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"sm\" className=\"channel-container\">\r\n        <div>\r\n          {messages.map((message) => (\r\n            <div key={message.id} className=\"channel-message\">\r\n              <Message {...message} />\r\n            </div>\r\n          ))}\r\n          <div ref={dummy}></div>\r\n        </div>\r\n      </Container>\r\n      <form\r\n        onSubmit={handleOnSubmit}\r\n        className=\"channel-form\"\r\n        autoComplete=\"off\"\r\n      >\r\n        <TextField\r\n          className=\"channel-text\"\r\n          id=\"standard-basic\"\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={handleOnChange}\r\n          placeholder=\"Type your message here\"\r\n        />\r\n        <IconButton type=\"submit\" disabled={!newMessage}>\r\n          <SendIcon />\r\n        </IconButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport QuestionAnswerIcon from \"@material-ui/icons/QuestionAnswer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Header({ auth, user }) {\r\n  const classes = useStyles();\r\n  const signOut = async () => {\r\n    try {\r\n      await auth.signOut();\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"sticky\" style={{ position: \"fixed\" }}>\r\n        <Toolbar>\r\n          <QuestionAnswerIcon />\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Chat Room\r\n          </Typography>\r\n          {user ? (\r\n            <Button color=\"inherit\" onClick={signOut}>\r\n              Sign Out\r\n            </Button>\r\n          ) : null}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport Channel from \"./components/Channel\";\nimport Header from \"./components/Header\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./App.css\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDSv6qHzaRD0U1vkk6Osn0lNFSu6cTSUi4\",\n  authDomain: \"react-chatroom-c7ef7.firebaseapp.com\",\n  projectId: \"react-chatroom-c7ef7\",\n  storageBucket: \"react-chatroom-c7ef7.appspot.com\",\n  messagingSenderId: \"474147204325\",\n  appId: \"1:474147204325:web:70cbd153b03967c65d780c\",\n});\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\n\nfunction App() {\n  const [user, setUser] = useState(() => firebase.auth.currentUser);\n  // const [initializing, setInitializing] = useState(true);\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(null);\n      }\n    });\n    // if(initializing)\n    //   setInitializing(false);\n\n    return unsubscribe;\n  }, []);\n\n  const signInWithGoogle = async () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.useDeviceLanguage();\n    try {\n      await auth.signInWithPopup(provider);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // const signOut = async() =>{\n  //   try{\n  //     await auth.signOut();\n  //   }\n  //   catch(err){\n  //     console.log(err.message);\n  //   }\n  // };\n\n  // if(initializing) return \"Loading...\";\n  return (\n    <div>\n      <Header auth={auth} user={user} />\n      {user ? (\n        <div>\n          {/* <Button onClick={signOut}>Sign out</Button> */}\n          <Channel user={user} db={db}></Channel>\n        </div>\n      ) : (\n        <div className=\"app-content\">\n          <Typography\n            className=\"app-header\"\n            align=\"center\"\n            color=\"primary\"\n            variant=\"h4\"\n          >\n            Welcome to ChatRoom\n          </Typography>\n          <Typography\n            className=\"app-bodytext\"\n            varient=\"body2\"\n            align=\"center\"\n            color=\"textSecondary\"\n          >\n            This is a simple chatroom application built in React and Firebase\n            with some Material UI. Click Below to login with your google\n            account. Do write some reviews.\n          </Typography>\n          <div className=\"container\">\n            <Button\n              onClick={signInWithGoogle}\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"medium\"\n            >\n              Sign In With Google\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}